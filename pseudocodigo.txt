##FUNCIONES

FUNCIÓN leer_nota()
    REPETIR
        INTENTAR
            LEER nota
            SI nota >= 0 Y nota <= 100 ENTONCES
                RETORNAR nota
        SI ERROR: CONTINUAR
    HASTA nota válida
FIN FUNCIÓN


FUNCIÓN agregar_curso(lista, historial, cola_revision)
    LEER nombre
    SI nombre vacío ENTONCES
        MOSTRAR "El nombre no puede estar vacío"
        RETORNAR
    FIN SI
    nota ← leer_nota()
    curso ← {nombre, nota}
    AGREGAR curso a lista
    AGREGAR "Se agregó: nombre - Nota: nota" al historial
    ENCOLAR nombre en cola_revision
    MOSTRAR "Curso registrado con éxito"
FIN FUNCIÓN

FUNCIÓN mostrar_cursos(lista)
    SI lista vacía ENTONCES
        MOSTRAR "No hay cursos registrados"
        RETORNAR
    FIN SI
    MOSTRAR "Cursos registrados:"
    PARA cada curso EN lista
        MOSTRAR curso.nombre y curso.nota
    FIN PARA
FIN FUNCIÓN

FUNCIÓN calcular_promedio_general(lista)
    SI lista vacía ENTONCES
        MOSTRAR "No hay cursos registrados"
        RETORNAR
    FIN SI
    suma ← SUMA de notas
    promedio ← suma / tamaño(lista)
    MOSTRAR "Promedio general:", promedio
FIN FUNCIÓN

FUNCIÓN contar_aprobados_reprobados(lista)
    SI lista vacía ENTONCES
        MOSTRAR "No hay cursos registrados"
        RETORNAR
    FIN SI
    aprobados ← cantidad con nota >= 60
    reprobados ← tamaño(lista) - aprobados
    MOSTRAR aprobados y reprobados
FIN FUNCIÓN

FUNCIÓN buscar_curso(lista)
    SI lista vacía ENTONCES
        MOSTRAR "No hay cursos registrados"
        RETORNAR
    FIN SI
    LEER nombre_buscar
    encontrado ← FALSO
    PARA cada curso EN lista
        SI nombre_buscar contenido en curso.nombre (sin mayúsculas)
            MOSTRAR curso encontrado
            encontrado ← VERDADERO
        FIN SI
    FIN PARA
    SI NO encontrado ENTONCES
        MOSTRAR "Curso no encontrado"
FIN FUNCIÓN


FUNCIÓN actualizar_curso(lista, historial)
    SI lista vacía ENTONCES
        MOSTRAR "No hay cursos registrados"
        RETORNAR
    FIN SI
    LEER nombre
    PARA cada curso EN lista
        SI curso.nombre = nombre (sin mayúsculas)
            nueva_nota ← leer_nota()
            historial.agregar("Se actualizó: nombre - Nota anterior: curso.nota -> Nueva: nueva_nota")
            curso.nota ← nueva_nota
            MOSTRAR "Nota actualizada correctamente"
            RETORNAR
        FIN SI
    FIN PARA
    MOSTRAR "Curso no encontrado"
FIN FUNCIÓN


FUNCIÓN eliminar_curso(lista, historial)
    SI lista vacía ENTONCES
        MOSTRAR "No hay cursos registrados"
        RETORNAR
    FIN SI
    LEER nombre
    PARA cada curso EN lista
        SI curso.nombre = nombre (sin mayúsculas)
            LEER confirmación (s/n)
            SI confirmación = "s"
                ELIMINAR curso de lista
                historial.agregar("Se eliminó: nombre - Nota: curso.nota")
                MOSTRAR "Curso eliminado"
            SINO
                MOSTRAR "Eliminación cancelada"
            FIN SI
            RETORNAR
        FIN SI
    FIN PARA
    MOSTRAR "Curso no encontrado"
FIN FUNCIÓN


FUNCIÓN ordenar_burbuja(lista)
    SI lista vacía ENTONCES
        MOSTRAR "No hay cursos registrados"
        RETORNAR
    FIN SI
    n ← tamaño(lista)
    PARA i ← 0 HASTA n-2
        PARA j ← 0 HASTA n-2-i
            SI lista\[j].nota < lista\[j+1].nota
                INTERCAMBIAR lista\[j] y lista\[j+1]
            FIN SI
        FIN PARA
    FIN PARA
    MOSTRAR "Cursos ordenados por nota (descendente)"
FIN FUNCIÓN


FUNCIÓN ordenar_insercion(lista)
    SI lista vacía ENTONCES
        MOSTRAR "No hay cursos registrados"
        RETORNAR
    FIN SI
    PARA i ← 1 HASTA tamaño(lista)-1
        clave ← lista\[i]
        j ← i - 1
        MIENTRAS j >= 0 Y lista\[j].nombre > clave.nombre
            lista\[j+1] ← lista\[j]
            j ← j - 1
        FIN MIENTRAS
        lista\[j+1] ← clave
    FIN PARA
    MOSTRAR "Cursos ordenados por nombre"
FIN FUNCIÓN


FUNCIÓN busqueda_binaria(lista)
    SI lista vacía ENTONCES
        MOSTRAR "No hay cursos registrados"
        RETORNAR
    FIN SI
    LEER nombre_buscar
    izquierda ← 0
    derecha ← tamaño(lista) - 1
    MIENTRAS izquierda <= derecha
        medio ← (izquierda + derecha) / 2
        SI lista\[medio].nombre = nombre_buscar
            MOSTRAR curso encontrado
            RETORNAR
        SI lista\[medio].nombre < nombre_buscar
            izquierda ← medio + 1
        SINO
            derecha ← medio - 1
    FIN MIENTRAS
    MOSTRAR "Curso no encontrado"
FIN FUNCIÓN


FUNCIÓN simular_cola_revision(cola_revision)
    MOSTRAR "Ingrese curso para revisión (escriba 'fin' para terminar)"
    MIENTRAS VERDADERO
        LEER curso
        SI curso = "fin" ENTONCES
            SALIR
        FIN SI
        ENCOLAR curso en cola_revision
    FIN MIENTRAS
    SI cola_revision vacía
        MOSTRAR "No hay solicitudes"
        RETORNAR
    FIN SI
    MOSTRAR "Procesando solicitudes:"
    MIENTRAS cola_revision NO vacía
        DESENCOLAR y mostrar curso
    FIN MIENTRAS
FIN FUNCIÓN


FUNCIÓN mostrar_historial(historial)
    SI historial vacío
        MOSTRAR "Historial vacío"
        RETORNAR
    FIN SI
    MOSTRAR "Historial de cambios recientes:"
    MOSTRAR historial en orden inverso
FIN FUNCIÓN


**PROGRAMA**
INICIO PROGRAMA
    DECLARAR lista cursos
    DECLARAR lista historial
    DECLARAR cola_revision
    MIENTRAS VERDADERO HACER
        MOSTRAR menú de opciones
        LEER opcion
        SEGÚN opcion HACER
            CASO 1: agregar_curso(cursos, historial, cola_revision)
            CASO 2: mostrar_cursos(cursos)
            CASO 3: calcular_promedio_general(cursos)
            CASO 4: contar_aprobados_reprobados(cursos)
            CASO 5: buscar_curso(cursos)
            CASO 6: actualizar_curso(cursos, historial)
            CASO 7: eliminar_curso(cursos, historial)
            CASO 8: ordenar_burbuja(cursos)
            CASO 9: ordenar_insercion(cursos)
            CASO 10: busqueda_binaria(cursos)
            CASO 11: simular_cola_revision(cola_revision)
            CASO 12: mostrar_historial(historial)
            CASO 13: SALIR
            CASO CONTRARIO: MOSTRAR "Opción no válida"
        FIN SEGÚN
    FIN MIENTRAS
FIN PROGRAMA
